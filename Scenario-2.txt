Specification:

1. User Sign-up:
- The user will provide their email and password for registration.
- The system will validate the email address format and ensure that the email is not already registered.
- The password will be encrypted and stored in the database.
- A verification link will be sent to the email provided by the user.
- Once the user clicks on the verification link, the email will be marked as verified.

2. Email Verification:
- The verification link will contain a unique token.
- The system will check the token and mark the user's email as verified in the database.
- If the token is invalid, the user will be shown an error message.

3. TOTP Registration:
- The user will be prompted to scan a QR code using a TOTP application such as Google Authenticator.
- The system will generate a secret key and a QR code containing the secret key.
- The QR code will be displayed to the user, and the secret key will be stored securely in the database.
- The user will be asked to enter the current TOTP code generated by the TOTP application to confirm registration.

4. User Login:
- The user will enter their email and password to log in.
- The system will verify that the email and password match an entry in the database.
- If the email and password are valid and the email has been verified, the system will generate a JWT (JSON Web Token) and return it to the user.
- The JWT will be used to authenticate the user for future requests.

Assumptions:

- The system will use a relational database to store user data.
- The system will use a JWT library for generating and verifying JWT tokens.
- The system will use a TOTP library for generating and verifying TOTP codes.
- The system will use an email sending library for sending verification emails.

Tiered Test Cases:

1. Unit Tests:
- Test the email format validation function.
- Test the password encryption function.
- Test the JWT token generation function.
- Test the TOTP code generation function.

2. Integration Tests:
- Test the email sending function.
- Test the database interaction for sign-up, email verification, TOTP registration, and login.
- Test the JWT token verification function.
- Test the TOTP code verification function.

3. End-to-End Tests:
- Test the user sign-up process from start to finish, including email verification.
- Test the TOTP registration process from start to finish, including TOTP code verification.
- Test the user login process from start to finish, including JWT token generation and verification.

Testing libraries / approaches considered:

1. Jest: Jest is a popular JavaScript testing framework that is widely used for unit testing. It has a built-in test runner, assertion library, and mocking capabilities. Jest also provides snapshot testing, which is useful for testing UI components.

2. Supertest: Supertest is a library for testing HTTP requests and responses. It can be used for integration testing to test the API endpoints and their responses.

3. Cypress: Cypress is a popular end-to-end testing framework that is widely used for testing web applications. It provides an intuitive and easy-to-use interface for writing tests. Cypress also provides real-time reloading, debugging, and automatic waiting, which makes it easy to write and debug tests.

Reasoning for choosing specific library:

For this project, I would use Jest for unit testing and Supertest for integration testing. Jest provides a good testing environment for JavaScript applications and has a simple and easy-to-use syntax. Supertest would be used for testing the API endpoints since it provides a simple and intuitive way to test HTTP requests and responses. For end-to-end testing, I would use Cypress since it provides an easy-to-use interface for writing and debugging tests. Cypress also provides real-time reloading, which makes
